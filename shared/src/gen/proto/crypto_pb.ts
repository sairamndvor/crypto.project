// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/crypto.proto (package crypto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Price data for a cryptocurrency ticker
 *
 * @generated from message crypto.v1.TickerPrice
 */
export class TickerPrice extends Message<TickerPrice> {
  /**
   * @generated from field: string ticker = 1;
   */
  ticker = "";

  /**
   * @generated from field: double price = 2;
   */
  price = 0;

  /**
   * @generated from field: int64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: string exchange = 4;
   */
  exchange = "";

  constructor(data?: PartialMessage<TickerPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "crypto.v1.TickerPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "exchange", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TickerPrice {
    return new TickerPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TickerPrice {
    return new TickerPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TickerPrice {
    return new TickerPrice().fromJsonString(jsonString, options);
  }

  static equals(a: TickerPrice | PlainMessage<TickerPrice> | undefined, b: TickerPrice | PlainMessage<TickerPrice> | undefined): boolean {
    return proto3.util.equals(TickerPrice, a, b);
  }
}

/**
 * Request to add a ticker to the subscription
 *
 * @generated from message crypto.v1.AddTickerRequest
 */
export class AddTickerRequest extends Message<AddTickerRequest> {
  /**
   * @generated from field: string ticker = 1;
   */
  ticker = "";

  constructor(data?: PartialMessage<AddTickerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "crypto.v1.AddTickerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddTickerRequest | PlainMessage<AddTickerRequest> | undefined, b: AddTickerRequest | PlainMessage<AddTickerRequest> | undefined): boolean {
    return proto3.util.equals(AddTickerRequest, a, b);
  }
}

/**
 * Request to remove a ticker from the subscription
 *
 * @generated from message crypto.v1.RemoveTickerRequest
 */
export class RemoveTickerRequest extends Message<RemoveTickerRequest> {
  /**
   * @generated from field: string ticker = 1;
   */
  ticker = "";

  constructor(data?: PartialMessage<RemoveTickerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "crypto.v1.RemoveTickerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTickerRequest | PlainMessage<RemoveTickerRequest> | undefined, b: RemoveTickerRequest | PlainMessage<RemoveTickerRequest> | undefined): boolean {
    return proto3.util.equals(RemoveTickerRequest, a, b);
  }
}

/**
 * Response for add/remove operations
 *
 * @generated from message crypto.v1.TickerResponse
 */
export class TickerResponse extends Message<TickerResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: repeated string active_tickers = 3;
   */
  activeTickers: string[] = [];

  constructor(data?: PartialMessage<TickerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "crypto.v1.TickerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "active_tickers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TickerResponse {
    return new TickerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TickerResponse {
    return new TickerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TickerResponse {
    return new TickerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TickerResponse | PlainMessage<TickerResponse> | undefined, b: TickerResponse | PlainMessage<TickerResponse> | undefined): boolean {
    return proto3.util.equals(TickerResponse, a, b);
  }
}

/**
 * Request to get current active tickers
 *
 * @generated from message crypto.v1.GetTickersRequest
 */
export class GetTickersRequest extends Message<GetTickersRequest> {
  constructor(data?: PartialMessage<GetTickersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "crypto.v1.GetTickersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTickersRequest {
    return new GetTickersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTickersRequest {
    return new GetTickersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTickersRequest {
    return new GetTickersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTickersRequest | PlainMessage<GetTickersRequest> | undefined, b: GetTickersRequest | PlainMessage<GetTickersRequest> | undefined): boolean {
    return proto3.util.equals(GetTickersRequest, a, b);
  }
}

/**
 * Response with current active tickers
 *
 * @generated from message crypto.v1.GetTickersResponse
 */
export class GetTickersResponse extends Message<GetTickersResponse> {
  /**
   * @generated from field: repeated string tickers = 1;
   */
  tickers: string[] = [];

  constructor(data?: PartialMessage<GetTickersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "crypto.v1.GetTickersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tickers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTickersResponse {
    return new GetTickersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTickersResponse {
    return new GetTickersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTickersResponse {
    return new GetTickersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTickersResponse | PlainMessage<GetTickersResponse> | undefined, b: GetTickersResponse | PlainMessage<GetTickersResponse> | undefined): boolean {
    return proto3.util.equals(GetTickersResponse, a, b);
  }
}

